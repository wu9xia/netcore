@page "/picture"
@page "/picture/{temp}"
@using System.IO;
@using PictureManager.Model;
@using PictureManager.Pages.Components;
@using System.Text;
@using Common.Utility;
@using Newtonsoft.Json;
@inject HttpClient Http
@inject NavigationManager navigationManager
<link href="css/picture.css" rel="stylesheet" />

<h3 class="title">PictureLibrary</h3>

<div class="topbar">
    <div class="right">
        <select>
            <option value="0" selected="selected">全部</option>
            <option value="1">按姓名排序</option>
            <option value="1">按日期排序</option>
        </select>
    </div>
</div>
<div class="masonry">
    @if (_pictures != null)
    {
        foreach (var pic_path in _pictures)
        {
            <div class="item"><img src="@pic_path" style="width: 100%"></div>
        }
    }
</div>
@*<PagingComponent Page="1" PageSize="10" Count="10" Pages="10"/>*@
<PagingComponent @bind-Page="@_page" PageSize="@_pageSize" Count="@_count" HrefString="/picture" />


@code {


    private List<string> _pictures;
    private int _page = 1;
    private int _pageSize = 8;
    private int _count = 0;
    //private int _pages = 0;
    [Parameter]
    public int Page
    {
        set
        {
            _page = value;
        }
        get
        {
            return _page;
        }
    }
    [Parameter]
    public string temp { get; set; } = "1";

    private bool isFirstLoad = true;

    protected override async Task OnInitializedAsync()
    {
        //this._pictures = new List<string>();
        //this._pictures.Add("../testpics/秦风手机壳.png");
        //this._pictures.Add("../testpics/下载.jpg");
        //var test = await Http.GetFromJsonAsync<ClientPictureModel>("api/Picture/GetPictures");

        isFirstLoad = false;
        await LoadPictures();

        //string basePath = "D:\\private\\pictures";
        //List<string> pictures = LoadPicture(basePath);
        //foreach (var path in pictures)
        //{
        //    this._pictures.Add(@"https://localhost:44350/PersonalPicture" + path.Substring(path.IndexOf(basePath)));
        //}

    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(temp))
        {
            Page = int.Parse(temp);
        }
        if(!isFirstLoad)
            await LoadPictures();
    }

    /// <summary>
    /// 是否渲染组件
    /// </summary>
    /// <returns></returns>
    protected override bool ShouldRender()
    {
        Console.WriteLine("ShouldRender");
        return true;
    }

    private async Task LoadPictures()
    {
        //正在开发中
        HttpResponseMessage message = await Http.PostAsJsonAsync<PictureModel>("api/Picture/GetPictures"
            , new PictureModel()
            {
                Page = this.Page,
                PageSize = this._pageSize
            });
        var a = message.Content;
        byte[] b = await a.ReadAsByteArrayAsync();
        string c = Encoding.UTF8.GetString(b);
        ClientPictureModel ctest = JsonConvert.DeserializeObject<ClientPictureModel>(c);
        if (ctest != null)
        {
            this._pictures = ctest.result;
        }
        //this._pictures = test.result;
        Console.WriteLine(this.Page + "-----" + this._pictures.FirstOrDefault());
        this._count = this._pictures.Count;

        temp = temp ?? "1";
        Page = Int32.Parse(temp);
    }
}
