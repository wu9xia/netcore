
<div class="pages">
    @{


        if (Page > 1)
        {
            <a onclick="jump('page', 1)" href="#">[&lt;&lt;</a>
            <a onclick="jump('page', Page - 1)" href="#">&lt;&lt;</a>
        }
        int start = Page - 5;
        if (start < 1)
        {
            start = 1;
        }

        int end = Page + 5;
        if (end > Pages)
        {
            end = Pages;
        }
        for (int i = start; i <= end; i++)
        {
            if (i == Page)
            {
                <a class="nowpage" onclick="jump('page', @i)" href="#">@i</a>
            }
            else
            {
                <a onclick="jump('page', @i)" href="#">@i</a>
            }

        }
        if (Page < Pages)
        {
            <a onclick="jump('page', _page + 1)" href="#">&gt;&gt;</a>
            <a onclick="jump('page', _pages)" href="#">&gt;&gt;]</a>
        }
    }
</div>
@code {

    #region pagesize
    [Parameter]
    public int PageSize { get; set; } = 10;
    [Parameter]
    public EventCallback<int> PageSizeChanged { get; set; }
    async Task UpdatePageSizeValue()
    {
        await PageSizeChanged.InvokeAsync(PageSize);
    }
    #endregion

    #region page
    [Parameter]
    public int Page { get; set; } = 1;
    [Parameter]
    public EventCallback<int> PageChanged { get; set; }
    async Task UpdatePageValue()
    {
        await PageChanged.InvokeAsync(Page);
    }
    #endregion

    #region Count
    [Parameter]
    public int Count { get; set; } = 0;
    [Parameter]
    public EventCallback<int> CountChanged { get; set; }
    async Task UpdateCountValue()
    {
        await CountChanged.InvokeAsync(Count);
    }
    #endregion


    #region Pages
    [Parameter]
    public int Pages { get; set; } = 1;
    [Parameter]
    public EventCallback<int> PagesChanged { get; set; }
    async Task UpdatePagesValue()
    {
        await PagesChanged.InvokeAsync(Pages);
    }
    #endregion


}
